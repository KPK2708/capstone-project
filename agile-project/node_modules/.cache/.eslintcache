[{"C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\index.js":"1","C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\App.js":"2","C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\context\\UserContext.js":"3","C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\components\\Dashboard\\Dashboard.js":"4","C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\components\\UserProfile\\UserProfile.js":"5","C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\components\\Signup\\SignUp.js":"6","C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\components\\Login\\Login.js":"7","C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\components\\Scrum Details\\ScrumDetails.js":"8"},{"size":151,"mtime":1742525990153,"results":"9","hashOfConfig":"10"},{"size":1564,"mtime":1742525990233,"results":"11","hashOfConfig":"10"},{"size":815,"mtime":1742525990279,"results":"12","hashOfConfig":"10"},{"size":6817,"mtime":1742525990739,"results":"13","hashOfConfig":"10"},{"size":6805,"mtime":1742525990786,"results":"14","hashOfConfig":"10"},{"size":1543,"mtime":1742525990678,"results":"15","hashOfConfig":"10"},{"size":1784,"mtime":1742525990833,"results":"16","hashOfConfig":"10"},{"size":6121,"mtime":1742525990900,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4bsznh",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\index.js",[],"C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\App.js",[],"C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\context\\UserContext.js",[],"C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\components\\Dashboard\\Dashboard.js",["35"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport ScrumDetails from '../Scrum Details/ScrumDetails';\r\nimport { UserContext } from '../../context/UserContext';\r\n\r\nconst Dashboard = () => {\r\n    const [scrums, setScrums] = useState([]);\r\n    const [selectedScrum, setSelectedScrum] = useState(null);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [users, setUsers] = useState([]);\r\n    const [newScrumName, setNewScrumName] = useState('');\r\n    const [newTaskTitle, setNewTaskTitle] = useState('');\r\n    const [newTaskDescription, setNewTaskDescription] = useState('');\r\n    const [newTaskStatus, setNewTaskStatus] = useState('To Do');\r\n    const [newTaskAssignedTo, setNewTaskAssignedTo] = useState('');\r\n    const { user } = useContext(UserContext);\r\n\r\n    useEffect(() => {\r\n        const fetchScrums = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:4000/scrums');\r\n                setScrums(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching scrums:', error);\r\n            }\r\n        };\r\n\r\n        const fetchUsers = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:4000/users');\r\n                setUsers(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching users:', error);\r\n            }\r\n        };\r\n\r\n        fetchScrums();\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    const handleGetDetails = async (scrumId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:4000/scrums/${scrumId}`);\r\n            setSelectedScrum(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching scrum details:', error);\r\n        }\r\n    };\r\n\r\n    const handleAddScrum = async (event) => {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            // Add new Scrum\r\n            const newScrumResponse = await axios.post('http://localhost:4000/scrums', {\r\n                name: newScrumName,\r\n            });\r\n\r\n            const newScrum = newScrumResponse.data;\r\n\r\n            // Add new Task\r\n            const newTaskResponse = await axios.post('http://localhost:4000/tasks', {\r\n                title: newTaskTitle,\r\n                description: newTaskDescription,\r\n                status: newTaskStatus,\r\n                scrumId: newScrum.id,\r\n                assignedTo: newTaskAssignedTo,\r\n                history: [\r\n                    {\r\n                        status: newTaskStatus,\r\n                        date: new Date().toISOString().split('T')[0], // Set the current date\r\n                    },\r\n                ],\r\n            });\r\n\r\n            const updatedScrums = await axios.get('http://localhost:4000/scrums');\r\n            setScrums(updatedScrums.data);\r\n            setShowForm(false); // Hide the form after submission\r\n            setNewScrumName('');\r\n            setNewTaskTitle('');\r\n            setNewTaskDescription('');\r\n            setNewTaskStatus('To Do');\r\n            setNewTaskAssignedTo('');\r\n        } catch (error) {\r\n            console.error('Error adding scrum:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Scrum Teams</h2>\r\n            {user?.role === 'admin' && <div>\r\n                <button onClick={() => setShowForm(!showForm)}>\r\n                    {showForm ? 'Cancel' : 'Add New Scrum'}\r\n                </button>\r\n                {showForm && (\r\n                    <form onSubmit={handleAddScrum}>\r\n                        <div>\r\n                            <label>Scrum Name:</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={newScrumName}\r\n                                onChange={(e) => setNewScrumName(e.target.value)}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label>Task Title:</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={newTaskTitle}\r\n                                onChange={(e) => setNewTaskTitle(e.target.value)}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label>Task Description:</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={newTaskDescription}\r\n                                onChange={(e) => setNewTaskDescription(e.target.value)}\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <label>Task Status:</label>\r\n                            <select\r\n                                value={newTaskStatus}\r\n                                onChange={(e) => setNewTaskStatus(e.target.value)}\r\n                                required\r\n                            >\r\n                                <option value=\"To Do\">To Do</option>\r\n                                <option value=\"In Progress\">In Progress</option>\r\n                                <option value=\"Done\">Done</option>\r\n                            </select>\r\n                        </div>\r\n                        <div>\r\n                            <label>Assign To:</label>\r\n                            <select\r\n                                value={newTaskAssignedTo}\r\n                                onChange={(e) => setNewTaskAssignedTo(e.target.value)}\r\n                                required\r\n                            >\r\n                                <option value=\"\">Select a user</option>\r\n                                {users.map((user) => (\r\n                                    <option key={user.id} value={user.id}>\r\n                                        {user.name} ({user.email})\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                        <button type=\"submit\">Create Scrum</button>\r\n                    </form>\r\n                )}\r\n            </div>}\r\n            <ul>\r\n                {scrums.map((scrum) => (\r\n                    <li key={scrum.id}>\r\n                        {scrum.name}\r\n                        <button onClick={() => handleGetDetails(scrum.id)}>Get Details</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {selectedScrum && <ScrumDetails scrum={selectedScrum} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\components\\UserProfile\\UserProfile.js",[],"C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\components\\Signup\\SignUp.js",[],"C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\components\\Login\\Login.js",[],"C:\\Users\\lenovo\\git\\capstoneproject\\capstone-project\\agile-project\\src\\components\\Scrum Details\\ScrumDetails.js",[],{"ruleId":"36","severity":1,"message":"37","line":62,"column":19,"nodeType":"38","messageId":"39","endLine":62,"endColumn":34},"no-unused-vars","'newTaskResponse' is assigned a value but never used.","Identifier","unusedVar"]